apply plugin: 'com.android.application'

apply plugin: 'androidx.navigation.safeargs'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

android {
    // 定义要重复使用的字符串
    def APP_NAME = "appName"

    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        // 定义包名
        applicationId "me.apqx.demo"
        versionCode 1
        versionName "1.0"

        // 定义可以在AndroidManifest文件中使用的变量，不同的分支比如release和debug可以覆写这个变量
        // 来实现不同分支的不同行为
        getManifestPlaceholders().put(APP_NAME, "DEF_NAME")
        minSdkVersion 15
        targetSdkVersion 28

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    // 这里是按方法块的定义顺序执行的，似乎有的代码块可以继承属性，有的就不可以
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            println("apqx: buildTypes debug")
            println("name1 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
            // 修改Debug模式下的应用名
            manifestPlaceholders = [appName: "Debug"]
            println("name2 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
            // debug模式下生成不一样的applicationId，让正式版和测试版共存
            applicationIdSuffix = '.debug'
            versionNameSuffix = "-debug"
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions 'version'
    productFlavors {
        // 每一个flavor都从defaultConfig中继承属性，并可以进行覆盖
        mi {

            dimension = 'version'
            println("apqx: flavor mi")
            println("name1 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
            manifestPlaceholders = [appName : "Mi"]
            println("name2 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
//            getManifestPlaceholders().put(APP_NAME, "Mi")
        }
        play {
            dimension = 'version'
            println("apqx: flavor play")
            println("name1 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
            manifestPlaceholders = [appName : "Play"]
            println("name2 = " + getManifestPlaceholders().get(APP_NAME, "NULL"))
//            getManifestPlaceholders().put(APP_NAME, "Play")
        }
    }

    android.applicationVariants.all { variant ->
//        variant.outputs.get(0).processManifest.doLast {
//            // 替换AndroidManifest文件中的字符
//            def manifestFile = "${buildDir}/intermediates/manifests/full/${variant.dirName}/AndroidManifest.xml"
//            def updatedContent = new File(manifestFile).getText('UTF-8')
//            if (variant.buildType.name.equals("release")) {
//                String productName = variant.productFlavors[0].name
//                switch (productName) {
//                    case "mi":
//                        updatedContent = updatedContent.replaceAll("APP_NAME", getReleaseMi())
//                        break
//                    case "play":
//                        updatedContent = updatedContent.replaceAll("APP_NAME", getReleasePlay())
//                        break
//                }
//            }
//
//            if (variant.buildType.name.equals("debug")) {
//                String productName = variant.productFlavors[0].name
//                switch (productName) {
//                    case "mi":
//                        updatedContent = updatedContent.replaceAll("APP_NAME", getReleaseMi())
//                        break
//                    case "play":
//                        updatedContent = updatedContent.replaceAll("APP_NAME", getReleasePlay())
//                        break
//                }
//            }
//            // 把修改后的内容，输出回源文件
//            new File(manifestFile).write(updatedContent, 'UTF-8')
//            // 把分支的AndroidManifest文件指定为上面修改后的文件
//            variant.outputs[0].processResources.manifestFile = file("${buildDir}/intermediates/manifests/full/${variant.dirName}/AndroidManifest.xml")
//        }
    }
}

static def getReleaseMi() {
    def release = "mi"
    return release
}

static def getReleasePlay() {
    def release = "play"
    return release
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    def lifecycle_version = "2.0.0"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0-alpha1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    def room_version = "2.1.0-alpha01"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // use kapt for Kotlin
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'
    // 和Retrofit配合使用时
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    // 将Retrofit的返回类型从Call<ResponseBody> 转换为 RxJava使用的 Observble<ResponseBody>
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    // 配合Gson将返回类型Observable<ResponseBody> 转换为 Observable<Target>
    implementation 'com.squareup.retrofit2:retrofit-converters:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    // 记录日志的拦截器
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    //    def nav_version = "1.0.0-alpha07"
    implementation "android.arch.navigation:navigation-fragment-ktx:$rootProject.navigationVersion"
    // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-ui-ktx:$rootProject.navigationVersion"
    // use -ktx for Kotlin
    def work_version = "1.0.0-alpha11"
    implementation "android.arch.work:work-runtime-ktx:$work_version"
    // use -ktx for Kotlin
    def paging_version = "2.1.0-beta01"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    // use -ktx for Kotlin
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    implementation 'com.android.support:design:28.0.0'
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation 'com.google.android:flexbox:2.0.0'

}
