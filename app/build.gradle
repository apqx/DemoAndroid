apply plugin: 'com.android.application'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {

    signingConfigs {
        mySign {
            storeFile file('../apqx.jks')
            storePassword '123456'
            keyAlias = 'apqx'
            keyPassword '123456'
        }
    }

    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29

        // 定义包名
        applicationId "me.apqx.demo"
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        // 定义可以在AndroidManifest文件中使用的变量，不同的分支比如release和debug可以覆写这个变量
        // 来实现不同分支的不同行为
        manifestPlaceholders APP_NAME: 'Demo',
                PH_MODE: 'DEF',
                PH_FLAVOR: 'DEF',
                PH_FLAVOR_MORE: 'DEF'
    }

    // 这里是按方法块的定义顺序执行的，似乎有的代码块可以继承属性，有的就不可以
    buildTypes {
        release {
            // 这里配置了release的签名，release任务才会出现在gradle自动生成的任务里
            signingConfig signingConfigs.mySign
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders APP_NAME: 'DemoRelease',
                    PH_MODE: 'release'
        }
        debug {
            signingConfig signingConfigs.mySign
            println("apqx: buildTypes debug")
            // debug模式下生成不一样的applicationId后缀，让正式版和测试版共存
            applicationIdSuffix = '.debug'
            // debug模式下定义不一样的版本名称后缀
            versionNameSuffix = "-debug"
            // 修改Debug模式下的应用名，这个属性会覆盖flavor中定义的属性
            manifestPlaceholders APP_NAME: 'DemoDebug',
                    PH_MODE: 'debug'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    flavorDimensions 'version'

    /**
     * 定义Flavor，每一个Flavor都拥有所有的buildType
     */
    productFlavors {
        // 每一个flavor都从defaultConfig中继承属性，并可以进行覆盖
        // 但是这里定义的属性，会被buildType中定义的相同属性覆盖
        mi {
            dimension = 'version'
            println("apqx: flavor mi")
            manifestPlaceholders PH_FLAVOR: 'mi',
                    PH_FLAVOR_MORE: 'mi_more'
        }
        play {
            dimension = 'version'
            println("apqx: flavor play")
            manifestPlaceholders PH_FLAVOR: 'play',
                    PH_FLAVOR_MORE: 'play_more'
        }
    }

    // 默认的输出路径为 ./{moduleName}/build/outputs/apk/{flavor}/{buildType}/xxx.apk
    android.applicationVariants.all { variant ->
        // variant.name 为 {flavor}{buildType} 一般类似 miDebug
        // variant.versionName 为 版本号 一般类似 1.0.0
        // variant.buildType.name 为 buildType，一般为release或debug
        variant.outputs.all {
            // 定义输出的apk路径和名字
            def apkName = "demo"
            // 相对于默认的输出路径，向上跳2个层级，在apk目录下
            // 注意，这里不再允许使用相对于工程根目录的绝对路径
//            outputFileName = "../../${variant.buildType.name}/${apkName}_${variant.name}_${variant.versionName}.apk"
        }
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlin_version"
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    def room_version = "2.2.4"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'

    implementation 'io.reactivex:rxjava:1.2.6'

    // 和Retrofit配合使用时
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    // 将Retrofit的返回类型从Call<ResponseBody> 转换为 RxJava使用的 Observable<ResponseBody>
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    // 配合Gson将返回类型Observable<ResponseBody> 转换为 Observable<Target>
    implementation 'com.squareup.retrofit2:retrofit-converters:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    // 记录日志的拦截器
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    // Navigation， use -ktx for Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigation_version"
    // use -ktx for Kotlin
    def work_version = "2.3.2"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    // use -ktx for Kotlin
    def paging_version = "2.1.1"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    // use -ktx for Kotlin
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    implementation 'org.greenrobot:eventbus:3.1.1'

    implementation 'com.google.android:flexbox:2.0.0'


    implementation 'com.jakewharton:butterknife:10.2.1'
    kapt 'com.jakewharton:butterknife-compiler:10.2.1'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation project(path: ':libbase')
    implementation project(path: ':libwidget')
    implementation project(path: ':libtools')

}
